{"ast":null,"code":"import { Observable, Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DataService = /*#__PURE__*/(() => {\n  class DataService {\n    constructor(_http) {\n      this._http = _http;\n      /* REST */\n\n      this.API_GET_INFO = environment.rest_proto + environment.api_url + \"info\";\n      this.API_GET_TEMPERATURE = environment.rest_proto + environment.api_url + \"temperature\";\n      this.API_GET_HUMIDITY = environment.rest_proto + environment.api_url + \"humidity\";\n      this.API_GET_DISTANCE = environment.rest_proto + environment.api_url + \"distance\";\n      this.API_GET_LED = environment.rest_proto + environment.api_url + \"led\";\n\n      this.API_SET_LED = s => environment.rest_proto + environment.api_url + \"led/\" + s;\n\n      this.WS_URL = environment.ws_proto + environment.api_url;\n    }\n\n    getInfo() {\n      return this._http.get(this.API_GET_INFO);\n    }\n\n    getTemperature() {\n      return this._http.get(this.API_GET_TEMPERATURE);\n    }\n\n    getHumidity() {\n      return this._http.get(this.API_GET_HUMIDITY);\n    }\n\n    getDistance() {\n      return this._http.get(this.API_GET_DISTANCE);\n    }\n\n    getLED() {\n      return this._http.get(this.API_GET_LED);\n    }\n\n    setLED(s) {\n      return this._http.get(this.API_SET_LED(s), {\n        responseType: 'text'\n      });\n    }\n\n    connectWS() {\n      let ws = new WebSocket(this.WS_URL);\n      let observable = Observable.create(obs => {\n        ws.onmessage = obs.next.bind(obs);\n        ws.onerror = obs.error.bind(obs);\n        ws.onclose = obs.complete.bind(obs);\n        return ws.close.bind(ws);\n      });\n      let observer = {\n        next: data => {\n          if (ws.readyState === WebSocket.OPEN) {\n            ws.send(JSON.stringify(data));\n          }\n        }\n      };\n      return Subject.create(observer, observable);\n    }\n\n  }\n\n  DataService.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  DataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataService;\n})();","map":null,"metadata":{},"sourceType":"module"}