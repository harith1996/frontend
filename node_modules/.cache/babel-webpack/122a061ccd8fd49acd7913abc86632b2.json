{"ast":null,"code":"import { MatTableDataSource } from '@angular/material/table';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@swimlane/ngx-charts\";\nimport * as i2 from \"@angular/material/table\";\n\nfunction TemperatureView_th_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 11);\n    i0.ɵɵtext(1, \" Time \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction TemperatureView_td_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r6 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r6.name.toLocaleString(), \" \");\n  }\n}\n\nfunction TemperatureView_th_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 11);\n    i0.ɵɵtext(1, \" Value \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction TemperatureView_td_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r7 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r7.value, \" \");\n  }\n}\n\nfunction TemperatureView_tr_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 13);\n  }\n}\n\nfunction TemperatureView_tr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 14);\n  }\n}\n\nfunction HumidityView_th_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 11);\n    i0.ɵɵtext(1, \" Time \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction HumidityView_td_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r6 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r6.name.toLocaleString(), \" \");\n  }\n}\n\nfunction HumidityView_th_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 11);\n    i0.ɵɵtext(1, \" Value \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction HumidityView_td_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r7 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r7.value, \" \");\n  }\n}\n\nfunction HumidityView_tr_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 13);\n  }\n}\n\nfunction HumidityView_tr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 14);\n  }\n}\n\nconst _c0 = \".container[_ngcontent-%COMP%]{display:flex;flex-direction:column;height:calc(100% - 64px);overflow:auto}.chart-container[_ngcontent-%COMP%]{max-height:40%}.table-container[_ngcontent-%COMP%]{width:100%;overflow:auto;max-height:calc(100% - $chart_height_mobile)}.table-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]{width:100%}@media only screen and (min-width: 800px){.container[_ngcontent-%COMP%]{flex-direction:row}.chart-container[_ngcontent-%COMP%]{max-height:97%;width:50%}.table-container[_ngcontent-%COMP%]{width:50%;max-height:100%}}\";\n\nfunction DistanceView_th_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 11);\n    i0.ɵɵtext(1, \" Time \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction DistanceView_td_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r6 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r6.name.toLocaleString(), \" \");\n  }\n}\n\nfunction DistanceView_th_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 11);\n    i0.ɵɵtext(1, \" Value \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction DistanceView_td_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r7 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r7.value, \" \");\n  }\n}\n\nfunction DistanceView_tr_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 13);\n  }\n}\n\nfunction DistanceView_tr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 14);\n  }\n}\n/* If the code for each view gets too complex\n  we can put each view in different files */\n\n/* TEMPERATURE VIEW */\n\n\nexport let TemperatureView = /*#__PURE__*/(() => {\n  class TemperatureView {\n    constructor() {\n      this.data = [{\n        \"name\": \"ºC\",\n        \"series\": []\n      }];\n      this.dataSource = new MatTableDataSource();\n      this.displayedColumns = ['name', 'value'];\n      this.legend = false;\n      this.showLabels = true;\n      this.animations = true;\n      this.xAxis = true;\n      this.yAxis = true;\n      this.showYAxisLabel = true;\n      this.showXAxisLabel = true;\n      this.xAxisLabel = 'Time';\n      this.yAxisLabel = 'Temperature';\n      this.timeline = false; // See https://swimlane.github.io/ngx-charts/\n\n      this.colorScheme = 'fire';\n    }\n\n    ngOnInit() {\n      setInterval(this.addData.bind(this), 1000);\n    }\n\n    addData() {\n      var time = new Date();\n      var number = Math.random() * 40;\n      this.data[0]['series'].push({\n        \"name\": time,\n        \"value\": number\n      });\n      this.data = [...this.data];\n      this.dataSource.data = this.data[0]['series'];\n    }\n\n  }\n\n  TemperatureView.ɵfac = function TemperatureView_Factory(t) {\n    return new (t || TemperatureView)();\n  };\n\n  TemperatureView.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TemperatureView,\n    selectors: [[\"temperature-view\"]],\n    decls: 13,\n    vars: 14,\n    consts: [[1, \"container\"], [1, \"chart-container\"], [3, \"scheme\", \"legend\", \"showXAxisLabel\", \"showYAxisLabel\", \"xAxis\", \"yAxis\", \"xAxisLabel\", \"yAxisLabel\", \"timeline\", \"results\"], [1, \"table-container\"], [\"mat-table\", \"\", 3, \"dataSource\"], [\"matColumnDef\", \"name\"], [\"mat-header-cell\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 4, \"matCellDef\"], [\"matColumnDef\", \"value\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\", \"matHeaderRowDefSticky\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\"]],\n    template: function TemperatureView_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelement(2, \"ngx-charts-line-chart\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"table\", 4);\n        i0.ɵɵelementContainerStart(5, 5);\n        i0.ɵɵtemplate(6, TemperatureView_th_6_Template, 2, 0, \"th\", 6);\n        i0.ɵɵtemplate(7, TemperatureView_td_7_Template, 2, 1, \"td\", 7);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(8, 8);\n        i0.ɵɵtemplate(9, TemperatureView_th_9_Template, 2, 0, \"th\", 6);\n        i0.ɵɵtemplate(10, TemperatureView_td_10_Template, 2, 1, \"td\", 7);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵtemplate(11, TemperatureView_tr_11_Template, 1, 0, \"tr\", 9);\n        i0.ɵɵtemplate(12, TemperatureView_tr_12_Template, 1, 0, \"tr\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"scheme\", ctx.colorScheme)(\"legend\", ctx.legend)(\"showXAxisLabel\", ctx.showXAxisLabel)(\"showYAxisLabel\", ctx.showYAxisLabel)(\"xAxis\", ctx.xAxis)(\"yAxis\", ctx.yAxis)(\"xAxisLabel\", ctx.xAxisLabel)(\"yAxisLabel\", ctx.yAxisLabel)(\"timeline\", ctx.timeline)(\"results\", ctx.data);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns)(\"matHeaderRowDefSticky\", true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n      }\n    },\n    directives: [i1.LineChartComponent, i2.MatTable, i2.MatColumnDef, i2.MatHeaderCellDef, i2.MatCellDef, i2.MatHeaderRowDef, i2.MatRowDef, i2.MatHeaderCell, i2.MatCell, i2.MatHeaderRow, i2.MatRow],\n    styles: [_c0]\n  });\n  /* HUMIDITY VIEW */\n\n  return TemperatureView;\n})();\nexport let HumidityView = /*#__PURE__*/(() => {\n  class HumidityView {\n    constructor() {\n      this.data = [{\n        \"name\": \"%\",\n        \"series\": []\n      }];\n      this.dataSource = new MatTableDataSource();\n      this.displayedColumns = ['name', 'value'];\n      this.legend = false;\n      this.showLabels = true;\n      this.animations = true;\n      this.xAxis = true;\n      this.yAxis = true;\n      this.showYAxisLabel = true;\n      this.showXAxisLabel = true;\n      this.xAxisLabel = 'Time';\n      this.yAxisLabel = 'Humidity';\n      this.timeline = false; // See https://swimlane.github.io/ngx-charts/\n\n      this.colorScheme = 'natural';\n    }\n\n    ngOnInit() {\n      setInterval(this.addData.bind(this), 1000);\n    }\n\n    addData() {\n      var time = new Date();\n      var number = Math.random() * 40;\n      this.data[0]['series'].push({\n        \"name\": time,\n        \"value\": number\n      });\n      this.data = [...this.data];\n      this.dataSource.data = this.data[0]['series'];\n    }\n\n  }\n\n  HumidityView.ɵfac = function HumidityView_Factory(t) {\n    return new (t || HumidityView)();\n  };\n\n  HumidityView.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HumidityView,\n    selectors: [[\"humidity-view\"]],\n    decls: 13,\n    vars: 14,\n    consts: [[1, \"container\"], [1, \"chart-container\"], [3, \"scheme\", \"legend\", \"showXAxisLabel\", \"showYAxisLabel\", \"xAxis\", \"yAxis\", \"xAxisLabel\", \"yAxisLabel\", \"timeline\", \"results\"], [1, \"table-container\"], [\"mat-table\", \"\", 3, \"dataSource\"], [\"matColumnDef\", \"name\"], [\"mat-header-cell\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 4, \"matCellDef\"], [\"matColumnDef\", \"value\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\", \"matHeaderRowDefSticky\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\"]],\n    template: function HumidityView_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelement(2, \"ngx-charts-line-chart\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"table\", 4);\n        i0.ɵɵelementContainerStart(5, 5);\n        i0.ɵɵtemplate(6, HumidityView_th_6_Template, 2, 0, \"th\", 6);\n        i0.ɵɵtemplate(7, HumidityView_td_7_Template, 2, 1, \"td\", 7);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(8, 8);\n        i0.ɵɵtemplate(9, HumidityView_th_9_Template, 2, 0, \"th\", 6);\n        i0.ɵɵtemplate(10, HumidityView_td_10_Template, 2, 1, \"td\", 7);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵtemplate(11, HumidityView_tr_11_Template, 1, 0, \"tr\", 9);\n        i0.ɵɵtemplate(12, HumidityView_tr_12_Template, 1, 0, \"tr\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"scheme\", ctx.colorScheme)(\"legend\", ctx.legend)(\"showXAxisLabel\", ctx.showXAxisLabel)(\"showYAxisLabel\", ctx.showYAxisLabel)(\"xAxis\", ctx.xAxis)(\"yAxis\", ctx.yAxis)(\"xAxisLabel\", ctx.xAxisLabel)(\"yAxisLabel\", ctx.yAxisLabel)(\"timeline\", ctx.timeline)(\"results\", ctx.data);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns)(\"matHeaderRowDefSticky\", true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n      }\n    },\n    directives: [i1.LineChartComponent, i2.MatTable, i2.MatColumnDef, i2.MatHeaderCellDef, i2.MatCellDef, i2.MatHeaderRowDef, i2.MatRowDef, i2.MatHeaderCell, i2.MatCell, i2.MatHeaderRow, i2.MatRow],\n    styles: [_c0]\n  });\n  /* DISTANCE VIEW */\n\n  return HumidityView;\n})();\nexport let DistanceView = /*#__PURE__*/(() => {\n  class DistanceView {\n    constructor() {\n      this.data = [{\n        \"name\": \"cm\",\n        \"series\": []\n      }];\n      this.dataSource = new MatTableDataSource();\n      this.displayedColumns = ['name', 'value'];\n      this.legend = false;\n      this.showLabels = true;\n      this.animations = true;\n      this.xAxis = true;\n      this.yAxis = true;\n      this.showYAxisLabel = true;\n      this.showXAxisLabel = true;\n      this.xAxisLabel = 'Time';\n      this.yAxisLabel = 'Centimeters';\n      this.timeline = false; // See https://swimlane.github.io/ngx-charts/\n\n      this.colorScheme = 'flame';\n    }\n\n    ngOnInit() {\n      setInterval(this.addData.bind(this), 1000);\n    }\n\n    addData() {\n      var time = new Date();\n      var number = Math.random() * 40;\n      this.data[0]['series'].push({\n        \"name\": time,\n        \"value\": number\n      });\n      this.data = [...this.data];\n      this.dataSource.data = this.data[0]['series'];\n    }\n\n  }\n\n  DistanceView.ɵfac = function DistanceView_Factory(t) {\n    return new (t || DistanceView)();\n  };\n\n  DistanceView.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DistanceView,\n    selectors: [[\"distance-view\"]],\n    decls: 13,\n    vars: 14,\n    consts: [[1, \"container\"], [1, \"chart-container\"], [3, \"scheme\", \"legend\", \"showXAxisLabel\", \"showYAxisLabel\", \"xAxis\", \"yAxis\", \"xAxisLabel\", \"yAxisLabel\", \"timeline\", \"results\"], [1, \"table-container\"], [\"mat-table\", \"\", 3, \"dataSource\"], [\"matColumnDef\", \"name\"], [\"mat-header-cell\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 4, \"matCellDef\"], [\"matColumnDef\", \"value\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\", \"matHeaderRowDefSticky\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\"]],\n    template: function DistanceView_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelement(2, \"ngx-charts-line-chart\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"table\", 4);\n        i0.ɵɵelementContainerStart(5, 5);\n        i0.ɵɵtemplate(6, DistanceView_th_6_Template, 2, 0, \"th\", 6);\n        i0.ɵɵtemplate(7, DistanceView_td_7_Template, 2, 1, \"td\", 7);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(8, 8);\n        i0.ɵɵtemplate(9, DistanceView_th_9_Template, 2, 0, \"th\", 6);\n        i0.ɵɵtemplate(10, DistanceView_td_10_Template, 2, 1, \"td\", 7);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵtemplate(11, DistanceView_tr_11_Template, 1, 0, \"tr\", 9);\n        i0.ɵɵtemplate(12, DistanceView_tr_12_Template, 1, 0, \"tr\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"scheme\", ctx.colorScheme)(\"legend\", ctx.legend)(\"showXAxisLabel\", ctx.showXAxisLabel)(\"showYAxisLabel\", ctx.showYAxisLabel)(\"xAxis\", ctx.xAxis)(\"yAxis\", ctx.yAxis)(\"xAxisLabel\", ctx.xAxisLabel)(\"yAxisLabel\", ctx.yAxisLabel)(\"timeline\", ctx.timeline)(\"results\", ctx.data);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns)(\"matHeaderRowDefSticky\", true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n      }\n    },\n    directives: [i1.LineChartComponent, i2.MatTable, i2.MatColumnDef, i2.MatHeaderCellDef, i2.MatCellDef, i2.MatHeaderRowDef, i2.MatRowDef, i2.MatHeaderCell, i2.MatCell, i2.MatHeaderRow, i2.MatRow],\n    styles: [_c0]\n  });\n  return DistanceView;\n})();","map":null,"metadata":{},"sourceType":"module"}