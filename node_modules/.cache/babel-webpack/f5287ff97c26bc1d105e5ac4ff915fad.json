{"ast":null,"code":"import { MatTableDataSource } from '@angular/material/table';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../data.service\";\nimport * as i2 from \"@swimlane/ngx-charts\";\nimport * as i3 from \"@angular/material/table\";\n\nfunction TemperatureView_th_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 11);\n    i0.ɵɵtext(1, \" Time \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction TemperatureView_td_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r6 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r6.name.toLocaleString(), \" \");\n  }\n}\n\nfunction TemperatureView_th_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 11);\n    i0.ɵɵtext(1, \" Value \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction TemperatureView_td_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r7 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r7.value, \" \");\n  }\n}\n\nfunction TemperatureView_tr_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 13);\n  }\n}\n\nfunction TemperatureView_tr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 14);\n  }\n}\n\nfunction HumidityView_th_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 11);\n    i0.ɵɵtext(1, \" Time \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction HumidityView_td_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r6 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r6.name.toLocaleString(), \" \");\n  }\n}\n\nfunction HumidityView_th_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 11);\n    i0.ɵɵtext(1, \" Value \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction HumidityView_td_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r7 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r7.value, \" \");\n  }\n}\n\nfunction HumidityView_tr_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 13);\n  }\n}\n\nfunction HumidityView_tr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 14);\n  }\n}\n\nconst _c0 = \".container[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  height: calc(100% - 64px);\\n  overflow: auto;\\n}\\n.chart-container[_ngcontent-%COMP%] {\\n  max-height: 40%;\\n}\\n.table-container[_ngcontent-%COMP%] {\\n  width: 100%;\\n  overflow: auto;\\n  max-height: calc(100% - $chart_height_mobile);\\n}\\n.table-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n\\n@media only screen and (min-width: 800px) {\\n  .container[_ngcontent-%COMP%] {\\n    flex-direction: row;\\n  }\\n\\n  .chart-container[_ngcontent-%COMP%] {\\n    max-height: 97%;\\n    width: 50%;\\n  }\\n\\n  .table-container[_ngcontent-%COMP%] {\\n    width: 50%;\\n    max-height: 100%;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZpZXctZGF0YS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwyQkFBQTtBQUdBLHVEQUFBO0FBRUEscUJBQUE7QUFHQSxlQUFBO0FBQ0E7RUFDSSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSx5QkFBQTtFQUNBLGNBQUE7QUFKSjtBQU9BO0VBQ0ksZUFia0I7QUFTdEI7QUFPQTtFQUNJLFdBQUE7RUFDQSxjQUFBO0VBQ0EsNkNBakJrQjtBQWF0QjtBQU1JO0VBQ0ksV0FBQTtBQUpSO0FBUUEsd0NBQUE7QUFDQTtFQUVJO0lBQ0ksbUJBQUE7RUFOTjs7RUFTRTtJQUNJLGVBQUE7SUFDQSxVQUFBO0VBTk47O0VBU0U7SUFDSSxVQUFBO0lBQ0EsZ0JBQUE7RUFOTjtBQUNGIiwiZmlsZSI6InZpZXctZGF0YS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIERlZmF1bHQgdG9vbGJhciBoZWlnaHQgKi9cbiR0b29sYmFyX2hlaWdodDogNjRweDtcblxuLyogSGVpZ2h0IHRoYXQgdGhlIGNoYXJ0IHRha2VzIHVwIGZvciBzbWFsbGVyIHNjcmVlbnMgKi9cbiRjaGFydF9oZWlnaHRfbW9iaWxlOiA0MCU7XG4vKiBTZWxmIGV4cGxhbmF0b3J5ICovXG4kdGFibGVfaGVpZ2h0X21vYmlsZTogY2FsYygxMDAlIC0gJGNoYXJ0X2hlaWdodF9tb2JpbGUpO1xuXG4vKiBDT05UQUlORVJTICovXG4uY29udGFpbmVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAjeyR0b29sYmFyX2hlaWdodH0pO1xuICAgIG92ZXJmbG93OiBhdXRvO1xufVxuXG4uY2hhcnQtY29udGFpbmVyIHtcbiAgICBtYXgtaGVpZ2h0OiAkY2hhcnRfaGVpZ2h0X21vYmlsZTtcbn1cblxuLnRhYmxlLWNvbnRhaW5lciB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgbWF4LWhlaWdodDogJHRhYmxlX2hlaWdodF9tb2JpbGU7XG5cbiAgICB0YWJsZSB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cbn1cblxuLyogSW50ZW5kZWQgZm9yIHNtYWxsIHNjcmVlbnMgKHBob25lcykgKi9cbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogODAwcHgpIHtcblxuICAgIC5jb250YWluZXIge1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICAgIH1cblxuICAgIC5jaGFydC1jb250YWluZXIge1xuICAgICAgICBtYXgtaGVpZ2h0OiA5NyU7XG4gICAgICAgIHdpZHRoOiA1MCU7XG4gICAgfVxuXG4gICAgLnRhYmxlLWNvbnRhaW5lciB7XG4gICAgICAgIHdpZHRoOiA1MCU7XG4gICAgICAgIG1heC1oZWlnaHQ6IDEwMCU7XG4gICAgfVxufSJdfQ== */\";\n\nfunction DistanceView_th_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 11);\n    i0.ɵɵtext(1, \" Time \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction DistanceView_td_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r6 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r6.name.toLocaleString(), \" \");\n  }\n}\n\nfunction DistanceView_th_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 11);\n    i0.ɵɵtext(1, \" Value \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction DistanceView_td_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r7 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r7.value, \" \");\n  }\n}\n\nfunction DistanceView_tr_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 13);\n  }\n}\n\nfunction DistanceView_tr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 14);\n  }\n}\n/* If the code for each view gets too complex\n  we can put each view in different files */\n\n/* TEMPERATURE VIEW */\n\n\nexport class TemperatureView {\n  constructor(_dataService) {\n    this._dataService = _dataService;\n    this.data = [{\n      \"name\": \"ºC\",\n      \"series\": []\n    }];\n    this.dataSource = new MatTableDataSource();\n    this.displayedColumns = ['name', 'value'];\n    this.legend = false;\n    this.showLabels = true;\n    this.animations = true;\n    this.xAxis = true;\n    this.yAxis = true;\n    this.showYAxisLabel = true;\n    this.showXAxisLabel = true;\n    this.xAxisLabel = 'Time';\n    this.yAxisLabel = 'Temperature';\n    this.timeline = false; // See https://swimlane.github.io/ngx-charts/\n\n    this.colorScheme = 'fire';\n  }\n\n  ngOnInit() {\n    setInterval(this.addData.bind(this), 1000);\n  }\n\n  addRandomData() {\n    var time = new Date();\n    var number = Math.random() * 40;\n    this.data[0]['series'].push({\n      \"name\": time,\n      \"value\": number\n    });\n    this.data = [...this.data];\n    this.dataSource.data = this.data[0]['series'];\n  }\n\n  addData() {\n    this, __asyncDelegator;\n    this.data[0]['series'].push({\n      \"name\": time,\n      \"value\": number\n    });\n    this.data = [...this.data];\n    this.dataSource.data = this.data[0]['series'];\n  }\n\n}\n\nTemperatureView.ɵfac = function TemperatureView_Factory(t) {\n  return new (t || TemperatureView)(i0.ɵɵdirectiveInject(i1.DataService));\n};\n\nTemperatureView.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TemperatureView,\n  selectors: [[\"temperature-view\"]],\n  decls: 13,\n  vars: 14,\n  consts: [[1, \"container\"], [1, \"chart-container\"], [3, \"scheme\", \"legend\", \"showXAxisLabel\", \"showYAxisLabel\", \"xAxis\", \"yAxis\", \"xAxisLabel\", \"yAxisLabel\", \"timeline\", \"results\"], [1, \"table-container\"], [\"mat-table\", \"\", 3, \"dataSource\"], [\"matColumnDef\", \"name\"], [\"mat-header-cell\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 4, \"matCellDef\"], [\"matColumnDef\", \"value\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\", \"matHeaderRowDefSticky\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\"]],\n  template: function TemperatureView_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelement(2, \"ngx-charts-line-chart\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 3);\n      i0.ɵɵelementStart(4, \"table\", 4);\n      i0.ɵɵelementContainerStart(5, 5);\n      i0.ɵɵtemplate(6, TemperatureView_th_6_Template, 2, 0, \"th\", 6);\n      i0.ɵɵtemplate(7, TemperatureView_td_7_Template, 2, 1, \"td\", 7);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(8, 8);\n      i0.ɵɵtemplate(9, TemperatureView_th_9_Template, 2, 0, \"th\", 6);\n      i0.ɵɵtemplate(10, TemperatureView_td_10_Template, 2, 1, \"td\", 7);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵtemplate(11, TemperatureView_tr_11_Template, 1, 0, \"tr\", 9);\n      i0.ɵɵtemplate(12, TemperatureView_tr_12_Template, 1, 0, \"tr\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"scheme\", ctx.colorScheme)(\"legend\", ctx.legend)(\"showXAxisLabel\", ctx.showXAxisLabel)(\"showYAxisLabel\", ctx.showYAxisLabel)(\"xAxis\", ctx.xAxis)(\"yAxis\", ctx.yAxis)(\"xAxisLabel\", ctx.xAxisLabel)(\"yAxisLabel\", ctx.yAxisLabel)(\"timeline\", ctx.timeline)(\"results\", ctx.data);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"dataSource\", ctx.dataSource);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns)(\"matHeaderRowDefSticky\", true);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n    }\n  },\n  directives: [i2.LineChartComponent, i3.MatTable, i3.MatColumnDef, i3.MatHeaderCellDef, i3.MatCellDef, i3.MatHeaderRowDef, i3.MatRowDef, i3.MatHeaderCell, i3.MatCell, i3.MatHeaderRow, i3.MatRow],\n  styles: [_c0]\n});\n/* HUMIDITY VIEW */\n\nexport class HumidityView {\n  constructor() {\n    this.data = [{\n      \"name\": \"%\",\n      \"series\": []\n    }];\n    this.dataSource = new MatTableDataSource();\n    this.displayedColumns = ['name', 'value'];\n    this.legend = false;\n    this.showLabels = true;\n    this.animations = true;\n    this.xAxis = true;\n    this.yAxis = true;\n    this.showYAxisLabel = true;\n    this.showXAxisLabel = true;\n    this.xAxisLabel = 'Time';\n    this.yAxisLabel = 'Humidity';\n    this.timeline = false; // See https://swimlane.github.io/ngx-charts/\n\n    this.colorScheme = 'natural';\n  }\n\n  ngOnInit() {\n    setInterval(this.addData.bind(this), 1000);\n  }\n\n  addData() {\n    var time = new Date();\n    var number = Math.random() * 40;\n    this.data[0]['series'].push({\n      \"name\": time,\n      \"value\": number\n    });\n    this.data = [...this.data];\n    this.dataSource.data = this.data[0]['series'];\n  }\n\n}\n\nHumidityView.ɵfac = function HumidityView_Factory(t) {\n  return new (t || HumidityView)();\n};\n\nHumidityView.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HumidityView,\n  selectors: [[\"humidity-view\"]],\n  decls: 13,\n  vars: 14,\n  consts: [[1, \"container\"], [1, \"chart-container\"], [3, \"scheme\", \"legend\", \"showXAxisLabel\", \"showYAxisLabel\", \"xAxis\", \"yAxis\", \"xAxisLabel\", \"yAxisLabel\", \"timeline\", \"results\"], [1, \"table-container\"], [\"mat-table\", \"\", 3, \"dataSource\"], [\"matColumnDef\", \"name\"], [\"mat-header-cell\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 4, \"matCellDef\"], [\"matColumnDef\", \"value\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\", \"matHeaderRowDefSticky\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\"]],\n  template: function HumidityView_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelement(2, \"ngx-charts-line-chart\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 3);\n      i0.ɵɵelementStart(4, \"table\", 4);\n      i0.ɵɵelementContainerStart(5, 5);\n      i0.ɵɵtemplate(6, HumidityView_th_6_Template, 2, 0, \"th\", 6);\n      i0.ɵɵtemplate(7, HumidityView_td_7_Template, 2, 1, \"td\", 7);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(8, 8);\n      i0.ɵɵtemplate(9, HumidityView_th_9_Template, 2, 0, \"th\", 6);\n      i0.ɵɵtemplate(10, HumidityView_td_10_Template, 2, 1, \"td\", 7);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵtemplate(11, HumidityView_tr_11_Template, 1, 0, \"tr\", 9);\n      i0.ɵɵtemplate(12, HumidityView_tr_12_Template, 1, 0, \"tr\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"scheme\", ctx.colorScheme)(\"legend\", ctx.legend)(\"showXAxisLabel\", ctx.showXAxisLabel)(\"showYAxisLabel\", ctx.showYAxisLabel)(\"xAxis\", ctx.xAxis)(\"yAxis\", ctx.yAxis)(\"xAxisLabel\", ctx.xAxisLabel)(\"yAxisLabel\", ctx.yAxisLabel)(\"timeline\", ctx.timeline)(\"results\", ctx.data);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"dataSource\", ctx.dataSource);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns)(\"matHeaderRowDefSticky\", true);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n    }\n  },\n  directives: [i2.LineChartComponent, i3.MatTable, i3.MatColumnDef, i3.MatHeaderCellDef, i3.MatCellDef, i3.MatHeaderRowDef, i3.MatRowDef, i3.MatHeaderCell, i3.MatCell, i3.MatHeaderRow, i3.MatRow],\n  styles: [_c0]\n});\n/* DISTANCE VIEW */\n\nexport class DistanceView {\n  constructor() {\n    this.data = [{\n      \"name\": \"cm\",\n      \"series\": []\n    }];\n    this.dataSource = new MatTableDataSource();\n    this.displayedColumns = ['name', 'value'];\n    this.legend = false;\n    this.showLabels = true;\n    this.animations = true;\n    this.xAxis = true;\n    this.yAxis = true;\n    this.showYAxisLabel = true;\n    this.showXAxisLabel = true;\n    this.xAxisLabel = 'Time';\n    this.yAxisLabel = 'Centimeters';\n    this.timeline = false; // See https://swimlane.github.io/ngx-charts/\n\n    this.colorScheme = 'flame';\n  }\n\n  ngOnInit() {\n    setInterval(this.addData.bind(this), 1000);\n  }\n\n  addData() {\n    var time = new Date();\n    var number = Math.random() * 40;\n    this.data[0]['series'].push({\n      \"name\": time,\n      \"value\": number\n    });\n    this.data = [...this.data];\n    this.dataSource.data = this.data[0]['series'];\n  }\n\n}\n\nDistanceView.ɵfac = function DistanceView_Factory(t) {\n  return new (t || DistanceView)();\n};\n\nDistanceView.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DistanceView,\n  selectors: [[\"distance-view\"]],\n  decls: 13,\n  vars: 14,\n  consts: [[1, \"container\"], [1, \"chart-container\"], [3, \"scheme\", \"legend\", \"showXAxisLabel\", \"showYAxisLabel\", \"xAxis\", \"yAxis\", \"xAxisLabel\", \"yAxisLabel\", \"timeline\", \"results\"], [1, \"table-container\"], [\"mat-table\", \"\", 3, \"dataSource\"], [\"matColumnDef\", \"name\"], [\"mat-header-cell\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 4, \"matCellDef\"], [\"matColumnDef\", \"value\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\", \"matHeaderRowDefSticky\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\"]],\n  template: function DistanceView_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelement(2, \"ngx-charts-line-chart\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 3);\n      i0.ɵɵelementStart(4, \"table\", 4);\n      i0.ɵɵelementContainerStart(5, 5);\n      i0.ɵɵtemplate(6, DistanceView_th_6_Template, 2, 0, \"th\", 6);\n      i0.ɵɵtemplate(7, DistanceView_td_7_Template, 2, 1, \"td\", 7);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(8, 8);\n      i0.ɵɵtemplate(9, DistanceView_th_9_Template, 2, 0, \"th\", 6);\n      i0.ɵɵtemplate(10, DistanceView_td_10_Template, 2, 1, \"td\", 7);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵtemplate(11, DistanceView_tr_11_Template, 1, 0, \"tr\", 9);\n      i0.ɵɵtemplate(12, DistanceView_tr_12_Template, 1, 0, \"tr\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"scheme\", ctx.colorScheme)(\"legend\", ctx.legend)(\"showXAxisLabel\", ctx.showXAxisLabel)(\"showYAxisLabel\", ctx.showYAxisLabel)(\"xAxis\", ctx.xAxis)(\"yAxis\", ctx.yAxis)(\"xAxisLabel\", ctx.xAxisLabel)(\"yAxisLabel\", ctx.yAxisLabel)(\"timeline\", ctx.timeline)(\"results\", ctx.data);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"dataSource\", ctx.dataSource);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns)(\"matHeaderRowDefSticky\", true);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n    }\n  },\n  directives: [i2.LineChartComponent, i3.MatTable, i3.MatColumnDef, i3.MatHeaderCellDef, i3.MatCellDef, i3.MatHeaderRowDef, i3.MatRowDef, i3.MatHeaderCell, i3.MatCell, i3.MatHeaderRow, i3.MatRow],\n  styles: [_c0]\n});","map":{"version":3,"sources":["/Users/smvg/Documents/IoT with P2P and Cloud Computing/Code/Milestone 1/frontend/src/app/view-data/view-data.component.ts","/Users/smvg/Documents/IoT with P2P and Cloud Computing/Code/Milestone 1/frontend/src/app/view-data/view-data.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { DataService } from '../data.service';\n\n/* If the code for each view gets too complex \n  we can put each view in different files */\n\n/* TEMPERATURE VIEW */\n@Component({\n  selector: 'temperature-view',\n  templateUrl: './view-data.component.html',\n  styleUrls: ['./view-data.component.scss']\n})\nexport class TemperatureView implements OnInit {\n\n  data: any[] = [\n    {\n      \"name\": \"ºC\",\n      \"series\": []\n    }\n  ];\n\n  dataSource = new MatTableDataSource<any>();\n  \n  displayedColumns: string[] = ['name', 'value'];\n\n  legend: boolean = false;\n  showLabels: boolean = true;\n  animations: boolean = true;\n  xAxis: boolean = true;\n  yAxis: boolean = true;\n  showYAxisLabel: boolean = true;\n  showXAxisLabel: boolean = true;\n  xAxisLabel: string = 'Time';\n  yAxisLabel: string = 'Temperature';\n  timeline: boolean = false;\n  // See https://swimlane.github.io/ngx-charts/\n  colorScheme = 'fire';\n\n  constructor(private _dataService: DataService) {}\n\n  ngOnInit(): void {\n    setInterval(this.addData.bind(this), 1000);\n  }\n\n  addRandomData(): void {\n    var time = new Date();\n    var number = Math.random() * 40;\n    this.data[0]['series'].push({\n      \"name\": time,\n      \"value\": number\n    })\n    this.data = [...this.data]\n    this.dataSource.data = this.data[0]['series']\n  }\n\n  addData(): void {\n\n    this,__asyncDelegator\n    this.data[0]['series'].push({\n      \"name\": time,\n      \"value\": number\n    })\n    this.data = [...this.data]\n    this.dataSource.data = this.data[0]['series']\n  }\n\n}\n\n\n/* HUMIDITY VIEW */\n@Component({\n  selector: 'humidity-view',\n  templateUrl: './view-data.component.html',\n  styleUrls: ['./view-data.component.scss']\n})\nexport class HumidityView implements OnInit {\n\n  data: any[] = [\n    {\n      \"name\": \"%\",\n      \"series\": []\n    }\n  ];\n\n  dataSource = new MatTableDataSource<any>();\n  \n  displayedColumns: string[] = ['name', 'value'];\n\n  legend: boolean = false;\n  showLabels: boolean = true;\n  animations: boolean = true;\n  xAxis: boolean = true;\n  yAxis: boolean = true;\n  showYAxisLabel: boolean = true;\n  showXAxisLabel: boolean = true;\n  xAxisLabel: string = 'Time';\n  yAxisLabel: string = 'Humidity';\n  timeline: boolean = false;\n  // See https://swimlane.github.io/ngx-charts/\n  colorScheme = 'natural';\n\n  constructor() {}\n\n  ngOnInit(): void {\n    setInterval(this.addData.bind(this), 1000);\n  }\n\n  addData(): void {\n    var time = new Date();\n    var number = Math.random() * 40;\n    this.data[0]['series'].push({\n      \"name\": time,\n      \"value\": number\n    })\n    this.data = [...this.data]\n    this.dataSource.data = this.data[0]['series']\n  }\n\n}\n\n/* DISTANCE VIEW */\n@Component({\n  selector: 'distance-view',\n  templateUrl: './view-data.component.html',\n  styleUrls: ['./view-data.component.scss']\n})\nexport class DistanceView implements OnInit {\n\n  data: any[] = [\n    {\n      \"name\": \"cm\",\n      \"series\": []\n    }\n  ];\n\n  dataSource = new MatTableDataSource<any>();\n  \n  displayedColumns: string[] = ['name', 'value'];\n\n  legend: boolean = false;\n  showLabels: boolean = true;\n  animations: boolean = true;\n  xAxis: boolean = true;\n  yAxis: boolean = true;\n  showYAxisLabel: boolean = true;\n  showXAxisLabel: boolean = true;\n  xAxisLabel: string = 'Time';\n  yAxisLabel: string = 'Centimeters';\n  timeline: boolean = false;\n  // See https://swimlane.github.io/ngx-charts/\n  colorScheme = 'flame';\n\n  constructor() {}\n\n  ngOnInit(): void {\n    setInterval(this.addData.bind(this), 1000);\n  }\n\n  addData(): void {\n    var time = new Date();\n    var number = Math.random() * 40;\n    this.data[0]['series'].push({\n      \"name\": time,\n      \"value\": number\n    })\n    this.data = [...this.data]\n    this.dataSource.data = this.data[0]['series']\n  }\n\n}","<div class=\"container\">\n    <div class=\"chart-container\">\n        <ngx-charts-line-chart\n        [scheme]=\"colorScheme\"\n        [legend]=\"legend\"\n        [showXAxisLabel]=\"showXAxisLabel\"\n        [showYAxisLabel]=\"showYAxisLabel\"\n        [xAxis]=\"xAxis\"\n        [yAxis]=\"yAxis\"\n        [xAxisLabel]=\"xAxisLabel\"\n        [yAxisLabel]=\"yAxisLabel\"\n        [timeline]=\"timeline\"\n        [results]=\"data\">\n        </ngx-charts-line-chart>\n    </div>\n    <div class=\"table-container\">\n        <table mat-table [dataSource]=\"dataSource\">\n        \n            <!-- Position Column -->\n            <ng-container matColumnDef=\"name\">\n              <th mat-header-cell *matHeaderCellDef> Time </th>\n              <td mat-cell *matCellDef=\"let element\"> {{element.name.toLocaleString()}} </td>\n            </ng-container>\n          \n            <!-- Name Column -->\n            <ng-container matColumnDef=\"value\">\n              <th mat-header-cell *matHeaderCellDef> Value </th>\n              <td mat-cell *matCellDef=\"let element\"> {{element.value}} </td>\n            </ng-container>\n          \n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n          </table>          \n    </div>\n</div>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}